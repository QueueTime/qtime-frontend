/* tslint:disable */
/* eslint-disable */
/**
 * QueueTime Flask REST API
 * QueueTime API for finding wait times of various points of interests at McMaster University
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * Error description
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface GetAllPOI200ResponseInner
 */
export interface GetAllPOI200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof GetAllPOI200ResponseInner
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof GetAllPOI200ResponseInner
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllPOI200ResponseInner
     */
    'class'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetAllPOI200ResponseInner
     */
    'hours_of_operation'?: object;
    /**
     * 
     * @type {string}
     * @memberof GetAllPOI200ResponseInner
     */
    'image_url'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetAllPOI200ResponseInner
     */
    'location'?: object;
    /**
     * 
     * @type {string}
     * @memberof GetAllPOI200ResponseInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAllPOI200ResponseInner
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ListRewardEvents200ResponseInner
 */
export interface ListRewardEvents200ResponseInner {
    /**
     * Number of points added or removed
     * @type {number}
     * @memberof ListRewardEvents200ResponseInner
     */
    'points': number;
    /**
     * Source of the reward points change
     * @type {string}
     * @memberof ListRewardEvents200ResponseInner
     */
    'source': string;
    /**
     * Timestamp of the reward event
     * @type {string}
     * @memberof ListRewardEvents200ResponseInner
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface POI
 */
export interface POI {
    /**
     * 
     * @type {string}
     * @memberof POI
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof POI
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof POI
     */
    'class'?: string;
    /**
     * 
     * @type {object}
     * @memberof POI
     */
    'hours_of_operation'?: object;
    /**
     * 
     * @type {string}
     * @memberof POI
     */
    'image_url'?: string;
    /**
     * 
     * @type {object}
     * @memberof POI
     */
    'location'?: object;
    /**
     * 
     * @type {string}
     * @memberof POI
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof POI
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface POISuggestion
 */
export interface POISuggestion {
    /**
     * 
     * @type {string}
     * @memberof POISuggestion
     */
    'notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof POISuggestion
     */
    'submitted_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof POISuggestion
     */
    'suggestion_name': string;
}
/**
 * 
 * @export
 * @interface RewardEvent
 */
export interface RewardEvent {
    /**
     * Number of points added or removed
     * @type {number}
     * @memberof RewardEvent
     */
    'points': number;
    /**
     * Source of the reward points change
     * @type {string}
     * @memberof RewardEvent
     */
    'source': string;
    /**
     * Timestamp of the reward event
     * @type {string}
     * @memberof RewardEvent
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface SubmitReferralCode400Response
 */
export interface SubmitReferralCode400Response {
    /**
     * Error description
     * @type {string}
     * @memberof SubmitReferralCode400Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SuggestNewPOIRequest
 */
export interface SuggestNewPOIRequest {
    /**
     * 
     * @type {string}
     * @memberof SuggestNewPOIRequest
     */
    'notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof SuggestNewPOIRequest
     */
    'submitted_by'?: string;
    /**
     * 
     * @type {string}
     * @memberof SuggestNewPOIRequest
     */
    'suggestion_name': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'color_theme'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'hasCompletedOnboarding'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'notification_setting'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'num_lines_participated'?: number;
    /**
     * 
     * @type {object}
     * @memberof User
     */
    'poi_frequency'?: object;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'referral_code'?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'reward_point_balance'?: number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'time_in_line'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerHealth: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServerHealth(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerHealth(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerHealth(options?: any): AxiosPromise<void> {
            return localVarFp.getServerHealth(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getServerHealth(options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getServerHealth(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getServerHealth(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * POIApi - axios parameter creator
 * @export
 */
export const POIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Read the list of POI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPOI: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/places/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read one POI
         * @param {string} poiId Point of interest name of the POI to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPOI: async (poiId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'poiId' is not null or undefined
            assertParamExists('getPOI', 'poiId', poiId)
            const localVarPath = `/places/list/{poi_id}`
                .replace(`{${"poi_id"}}`, encodeURIComponent(String(poiId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Suggest a new POI
         * @param {SuggestNewPOIRequest} suggestNewPOIRequest POI suggestion to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestNewPOI: async (suggestNewPOIRequest: SuggestNewPOIRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'suggestNewPOIRequest' is not null or undefined
            assertParamExists('suggestNewPOI', 'suggestNewPOIRequest', suggestNewPOIRequest)
            const localVarPath = `/places/suggest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(suggestNewPOIRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * POIApi - functional programming interface
 * @export
 */
export const POIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = POIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Read the list of POI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPOI(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAllPOI200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPOI(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read one POI
         * @param {string} poiId Point of interest name of the POI to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPOI(poiId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAllPOI200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPOI(poiId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Suggest a new POI
         * @param {SuggestNewPOIRequest} suggestNewPOIRequest POI suggestion to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suggestNewPOI(suggestNewPOIRequest: SuggestNewPOIRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAllPOI200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suggestNewPOI(suggestNewPOIRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * POIApi - factory interface
 * @export
 */
export const POIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = POIApiFp(configuration)
    return {
        /**
         * 
         * @summary Read the list of POI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPOI(options?: any): AxiosPromise<Array<GetAllPOI200ResponseInner>> {
            return localVarFp.getAllPOI(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read one POI
         * @param {string} poiId Point of interest name of the POI to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPOI(poiId: string, options?: any): AxiosPromise<Array<GetAllPOI200ResponseInner>> {
            return localVarFp.getPOI(poiId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Suggest a new POI
         * @param {SuggestNewPOIRequest} suggestNewPOIRequest POI suggestion to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestNewPOI(suggestNewPOIRequest: SuggestNewPOIRequest, options?: any): AxiosPromise<Array<GetAllPOI200ResponseInner>> {
            return localVarFp.suggestNewPOI(suggestNewPOIRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * POIApi - interface
 * @export
 * @interface POIApi
 */
export interface POIApiInterface {
    /**
     * 
     * @summary Read the list of POI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POIApiInterface
     */
    getAllPOI(options?: AxiosRequestConfig): AxiosPromise<Array<GetAllPOI200ResponseInner>>;

    /**
     * 
     * @summary Read one POI
     * @param {string} poiId Point of interest name of the POI to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POIApiInterface
     */
    getPOI(poiId: string, options?: AxiosRequestConfig): AxiosPromise<Array<GetAllPOI200ResponseInner>>;

    /**
     * 
     * @summary Suggest a new POI
     * @param {SuggestNewPOIRequest} suggestNewPOIRequest POI suggestion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POIApiInterface
     */
    suggestNewPOI(suggestNewPOIRequest: SuggestNewPOIRequest, options?: AxiosRequestConfig): AxiosPromise<Array<GetAllPOI200ResponseInner>>;

}

/**
 * POIApi - object-oriented interface
 * @export
 * @class POIApi
 * @extends {BaseAPI}
 */
export class POIApi extends BaseAPI implements POIApiInterface {
    /**
     * 
     * @summary Read the list of POI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POIApi
     */
    public getAllPOI(options?: AxiosRequestConfig) {
        return POIApiFp(this.configuration).getAllPOI(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read one POI
     * @param {string} poiId Point of interest name of the POI to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POIApi
     */
    public getPOI(poiId: string, options?: AxiosRequestConfig) {
        return POIApiFp(this.configuration).getPOI(poiId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Suggest a new POI
     * @param {SuggestNewPOIRequest} suggestNewPOIRequest POI suggestion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof POIApi
     */
    public suggestNewPOI(suggestNewPOIRequest: SuggestNewPOIRequest, options?: AxiosRequestConfig) {
        return POIApiFp(this.configuration).suggestNewPOI(suggestNewPOIRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes user account associated with client request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/delete-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all events that have impacted the user\'s point score either through additions stemming from submitting wait time estimates, etc. or reductions from redeeming rewards
         * @summary Retrieve events impacting user point score
         * @param {string} [before] Timestamp to retrieve events before
         * @param {number} [limit] Limit the number of events returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRewardEvents: async (before?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/rewards/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new user profile associated with a UID attached to the bearer of a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newUserSignup: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * During signup submit a referral code to earn points as part of a referral bonus
         * @summary Submit a referral code
         * @param {string} code User referral code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitReferralCode: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('submitReferralCode', 'code', code)
            const localVarPath = `/user/referral/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes user account associated with client request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all events that have impacted the user\'s point score either through additions stemming from submitting wait time estimates, etc. or reductions from redeeming rewards
         * @summary Retrieve events impacting user point score
         * @param {string} [before] Timestamp to retrieve events before
         * @param {number} [limit] Limit the number of events returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRewardEvents(before?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListRewardEvents200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRewardEvents(before, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new user profile associated with a UID attached to the bearer of a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newUserSignup(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newUserSignup(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * During signup submit a referral code to earn points as part of a referral bonus
         * @summary Submit a referral code
         * @param {string} code User referral code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitReferralCode(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitReferralCode(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes user account associated with client request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserProfile(options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * List all events that have impacted the user\'s point score either through additions stemming from submitting wait time estimates, etc. or reductions from redeeming rewards
         * @summary Retrieve events impacting user point score
         * @param {string} [before] Timestamp to retrieve events before
         * @param {number} [limit] Limit the number of events returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRewardEvents(before?: string, limit?: number, options?: any): AxiosPromise<Array<ListRewardEvents200ResponseInner>> {
            return localVarFp.listRewardEvents(before, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new user profile associated with a UID attached to the bearer of a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newUserSignup(options?: any): AxiosPromise<void> {
            return localVarFp.newUserSignup(options).then((request) => request(axios, basePath));
        },
        /**
         * During signup submit a referral code to earn points as part of a referral bonus
         * @summary Submit a referral code
         * @param {string} code User referral code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitReferralCode(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.submitReferralCode(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * 
     * @summary Deletes user account associated with client request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    deleteUserProfile(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * List all events that have impacted the user\'s point score either through additions stemming from submitting wait time estimates, etc. or reductions from redeeming rewards
     * @summary Retrieve events impacting user point score
     * @param {string} [before] Timestamp to retrieve events before
     * @param {number} [limit] Limit the number of events returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    listRewardEvents(before?: string, limit?: number, options?: AxiosRequestConfig): AxiosPromise<Array<ListRewardEvents200ResponseInner>>;

    /**
     * 
     * @summary Creates a new user profile associated with a UID attached to the bearer of a JWT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    newUserSignup(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * During signup submit a referral code to earn points as part of a referral bonus
     * @summary Submit a referral code
     * @param {string} code User referral code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    submitReferralCode(code: string, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * 
     * @summary Deletes user account associated with client request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserProfile(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUserProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all events that have impacted the user\'s point score either through additions stemming from submitting wait time estimates, etc. or reductions from redeeming rewards
     * @summary Retrieve events impacting user point score
     * @param {string} [before] Timestamp to retrieve events before
     * @param {number} [limit] Limit the number of events returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public listRewardEvents(before?: string, limit?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).listRewardEvents(before, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new user profile associated with a UID attached to the bearer of a JWT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public newUserSignup(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).newUserSignup(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * During signup submit a referral code to earn points as part of a referral bonus
     * @summary Submit a referral code
     * @param {string} code User referral code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public submitReferralCode(code: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).submitReferralCode(code, options).then((request) => request(this.axios, this.basePath));
    }
}


